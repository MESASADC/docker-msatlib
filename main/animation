#! /bin/bash

set -u
IN_DIR="${IN_DIR:-/tmp/in}"
OUT_DIR="${OUT_DIR:-/tmp/out}"

MSATLIB_DIR=/tmp/meteosatlib-1.3/examples

TIMESTR=$(/main/get_timestr.py)

DAYSTART_HOUR="${MSATLIB_DAYSTART_HOUR:-04}"
DAYEND_HOUR="${MSATLIB_DAYEND_HOUR:-17}"

# Mix different products based on local daylight hours
#
# DayNatural DayMicro DaySolar Airmass NightMicro H24Micro ConvectiveStorms Dust VolcanicAsh Vis006 Vis008 Ir016 Ir039 Ir039r Ir108 Wv62 Wv73 Hrv EnhancedIr HrvEnhancedIr HrvNearNatural HrvSevereStorms
utc_hour="$(date -u +%H)"
if [[ "$utc_hour" > "$DAYSTART_HOUR" ]] && [[ "$utc_hour" < "$DAYEND_HOUR" ]] ; then
  PRODUCTS="--products=${MSATLIB_PRODUCTS_DAY:-DayNatural}"
else
  PRODUCTS="--products=${MSATLIB_PRODUCTS_NIGHT:-EnhancedIr}"
fi
#FORMAT="--format=${MSATLIB_FORMAT:-JPEG}"
FORMAT="--format=JPEG"
# SHP file
if [ -f "/main/${MSATLIB_BORDERS_SHP:-za-borderlines.shp}" ]; then
  BORDERS_SHP="--shp=/main/${MSATLIB_BORDERS_SHP:-za-borderlines.shp}"
else
  BORDERS_SHP=""
fi

#CROP_OPT="-crop ${MSATLIB_GIF_CROP_OPT:-800x600+2200+2100}"
#RESIZE_OPT="-resize ${MSATLIB_GIF_RESIZE_OPT:-}"
#RESIZE_OPT=""
#DELAY_OPT="-delay ${MSATLIB_GIF_DELAY_OPT:-50}"

# Background color of animated GIF annotation
#BGCOLOR_OPT="${MSATLIB_GIF_BGCOLOR_OPT:-White}"

# Image collection interval in minutes
#COLLECT_MIN="${MSATLIB_GIF_COLLECT_MIN:-360}"

export GDAL_DRIVER_PATH=/usr/local/lib/gdalplugins/1.11
export PATH=$PATH:$MSATLIB_DIR

#
# TODO: Use TIMESTR in temp_dir name as mutex guard
#
temp_dir=${OUT_DIR}/tmp/$RANDOM
mkdir -p $temp_dir || {
  echo "Can't create working directory $temp_dir" >&2
  exit 1
}
trap "rm -rf $temp_dir" EXIT SIGHUP SIGINT SIGTERM

#
# Run in code directory in order to access palette data
#
# --warp='-te 14 -35 33 -22' does not work
# HrvEnhancedIr is prettiest almost 10MB per image
#
cd $MSATLIB_DIR
_ok=0
for _i in $(seq 5) ; do
  ./products -t $TIMESTR -s $IN_DIR -d $temp_dir --warp='-t_srs "+proj=latlong"' --cachedir=/tmp $PRODUCTS $FORMAT $BORDERS_SHP && {
    _ok=1
    break
  }
  sleep 30s
done
[ $_ok -eq 0 ] && {
  echo "ERROR: $? - maybe TIMESTR ($TIMESTR) is too soon" >&2
  exit 1
}

# Format timestamp for display yyyy-mm-dd HH:MM
_t="${TIMESTR:0:4}-${TIMESTR:4:2}-${TIMESTR:6:2} ${TIMESTR:8:2}:${TIMESTR:10} UTC"
echo $_t

# Create required output subdirectories
#for _x in large small gif ; do
#  [ -d "${OUT_DIR}/${_x}" ] || mkdir "${OUT_DIR}/${_x}"
#done

#set -x
#cd $temp_dir 
#for f in *.jpg ; do
#  [ -f "$f" ] || continue
  # Pixel bound of southern Africa was manually determined using Gimp
  # Requires imagemagick to crop image
#  cp -f $f ${OUT_DIR}/large/${TIMESTR}_${f}
#  mogrify $CROP_OPT $RESIZE_OPT $f && \
#  convert $f -gravity North -background ${BGCOLOR_OPT} -splice 0x18 -annotate +0+2 "$_t" ${OUT_DIR}/small/${TIMESTR}.jpg
#done

# Animate the ordered collection of small jpg
#flist=$(find ${OUT_DIR}/small -maxdepth 1 -type f -mmin -$COLLECT_MIN -name "*.jpg" | sort)
#[ -n "$flist" ] && cd ${OUT_DIR}/gif && convert $DELAY_OPT -loop 0 $flist "${TIMESTR}.gif" && ln -f "${TIMESTR}.gif" latest.gif

# Minimal housekeeping - remove very stale files except latest.gif
#find ${OUT_DIR}/{large,small,gif} -type f ! -name "latest.gif" -mtime +7 -exec rm -f {} \;
